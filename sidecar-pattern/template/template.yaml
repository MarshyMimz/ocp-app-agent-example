apiVersion: v1
kind: Template
labels:
  template: deployment-template
metadata:
  annotations:
    description: Application template to deploy a generic application
    iconClass: icon-tomcat
    tags: tomcat,tomcat8,java,jboss,xpaas,
    version: 0.0.1
  creationTimestamp: null
  name: deployment-template
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      base: ${BASE_IMAGE}
    name: ${APPLICATION_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |
        FROM registry.redhat.io/jboss-webserver-3/webserver31-tomcat8-openshift
        RUN sed -i 's/shared.loader=/shared.loader=\/mnt\/config,\/mnt\/newrelic/' /opt/webserver/conf/catalina.properties
        RUN rm -rf /deployments/*; curl $ARTIFACT_URL --output /deployments/ROOT.war
      type: Dockerfile
    strategy:
      dockerStrategy:
        env:
          - name: "ARTIFACT_URL"
            value: "${ARTIFACT_URL}"
        from:
          kind: ImageStreamTag
          name: ${BASE_IMAGE}:latest
          namespace: openshift
      type: Docker
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: ${APPLICATION_NAME}
      base: ${BASE_IMAGE}
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      resources: 
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.api-turnkey.image.entrypoint: '["/opt/webserver/bin/launch.sh"]'
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - image: newrelic-sidecar:latest
          name: newrelic-sidecar
          volumeMounts:
          - mountPath: /newrelic
            name: newrelic-volume
          - mountPath: /newrelic-config
            name: newrelic-config
        - image: ${APPLICATION_NAME}:latest
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          env: 
          - name: NEW_RELIC_APP_NAME
            value: ${APPLICATION_NAME}
          - name: NEW_RELIC_LICENSE_KEY
            valueFrom:
              secretKeyRef:
                name: newrelic-apikey
                key: API_KEY
          - name: CATALINA_OPTS_APPEND
            value: ${CATALINA_OPTS_APPEND}
          - name: NEW_RELIC_LOG
            value: "STDOUT"
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /mnt/newrelic
            name: newrelic-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: newrelic-config
          configMap:
            defaultMode: 420
            name: newrelic-config
        - name: newrelic-volume
          emptyDir: {}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - newrelic-sidecar
        from:
          kind: ImageStreamTag
          name: newrelic-sidecar:latest
      type: ImageChange  
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
    wildcardPolicy: None
parameters:
- description: The name for the application. Lowercase chars, digits and dashes only
  name: APPLICATION_NAME
  required: true
- description: Java OPTS to append to java
  name: CATALINA_OPTS_APPEND
  value: "-javaagent:/mnt/newrelic/newrelic.jar"
- description: Base Build Image
  name: BASE_IMAGE
  required: true
  value: jboss-webserver31-tomcat8-openshift  
- description: Artifact URL
  name: ARTIFACT_URL
  requred: true
  value: "https://raw.githubusercontent.com/mangirdaz/tomcat-helloworld/master/target/hello.war"
